/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package pl.punktozaur.avro.loyalty;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class PointsAddedAvroEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7116909077684882049L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PointsAddedAvroEvent\",\"namespace\":\"pl.punktozaur.avro.loyalty\",\"fields\":[{\"name\":\"sagaId\",\"type\":[\"null\",{\"type\":\"string\",\"logicalType\":\"uuid\"}]},{\"name\":\"loyaltyAccountId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"points\",\"type\":\"int\"},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.UUIDConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<PointsAddedAvroEvent> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PointsAddedAvroEvent> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<PointsAddedAvroEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<PointsAddedAvroEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<PointsAddedAvroEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this PointsAddedAvroEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a PointsAddedAvroEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a PointsAddedAvroEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static PointsAddedAvroEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.util.UUID sagaId;
  private java.util.UUID loyaltyAccountId;
  private int points;
  private java.time.Instant createdAt;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PointsAddedAvroEvent() {}

  /**
   * All-args constructor.
   * @param sagaId The new value for sagaId
   * @param loyaltyAccountId The new value for loyaltyAccountId
   * @param points The new value for points
   * @param createdAt The new value for createdAt
   */
  public PointsAddedAvroEvent(java.util.UUID sagaId, java.util.UUID loyaltyAccountId, java.lang.Integer points, java.time.Instant createdAt) {
    this.sagaId = sagaId;
    this.loyaltyAccountId = loyaltyAccountId;
    this.points = points;
    this.createdAt = createdAt.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return sagaId;
    case 1: return loyaltyAccountId;
    case 2: return points;
    case 3: return createdAt;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      new org.apache.avro.Conversions.UUIDConversion(),
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: sagaId = (java.util.UUID)value$; break;
    case 1: loyaltyAccountId = (java.util.UUID)value$; break;
    case 2: points = (java.lang.Integer)value$; break;
    case 3: createdAt = (java.time.Instant)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'sagaId' field.
   * @return The value of the 'sagaId' field.
   */
  public java.util.UUID getSagaId() {
    return sagaId;
  }


  /**
   * Sets the value of the 'sagaId' field.
   * @param value the value to set.
   */
  public void setSagaId(java.util.UUID value) {
    this.sagaId = value;
  }

  /**
   * Gets the value of the 'loyaltyAccountId' field.
   * @return The value of the 'loyaltyAccountId' field.
   */
  public java.util.UUID getLoyaltyAccountId() {
    return loyaltyAccountId;
  }


  /**
   * Sets the value of the 'loyaltyAccountId' field.
   * @param value the value to set.
   */
  public void setLoyaltyAccountId(java.util.UUID value) {
    this.loyaltyAccountId = value;
  }

  /**
   * Gets the value of the 'points' field.
   * @return The value of the 'points' field.
   */
  public int getPoints() {
    return points;
  }


  /**
   * Sets the value of the 'points' field.
   * @param value the value to set.
   */
  public void setPoints(int value) {
    this.points = value;
  }

  /**
   * Gets the value of the 'createdAt' field.
   * @return The value of the 'createdAt' field.
   */
  public java.time.Instant getCreatedAt() {
    return createdAt;
  }


  /**
   * Sets the value of the 'createdAt' field.
   * @param value the value to set.
   */
  public void setCreatedAt(java.time.Instant value) {
    this.createdAt = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Creates a new PointsAddedAvroEvent RecordBuilder.
   * @return A new PointsAddedAvroEvent RecordBuilder
   */
  public static pl.punktozaur.avro.loyalty.PointsAddedAvroEvent.Builder newBuilder() {
    return new pl.punktozaur.avro.loyalty.PointsAddedAvroEvent.Builder();
  }

  /**
   * Creates a new PointsAddedAvroEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PointsAddedAvroEvent RecordBuilder
   */
  public static pl.punktozaur.avro.loyalty.PointsAddedAvroEvent.Builder newBuilder(pl.punktozaur.avro.loyalty.PointsAddedAvroEvent.Builder other) {
    if (other == null) {
      return new pl.punktozaur.avro.loyalty.PointsAddedAvroEvent.Builder();
    } else {
      return new pl.punktozaur.avro.loyalty.PointsAddedAvroEvent.Builder(other);
    }
  }

  /**
   * Creates a new PointsAddedAvroEvent RecordBuilder by copying an existing PointsAddedAvroEvent instance.
   * @param other The existing instance to copy.
   * @return A new PointsAddedAvroEvent RecordBuilder
   */
  public static pl.punktozaur.avro.loyalty.PointsAddedAvroEvent.Builder newBuilder(pl.punktozaur.avro.loyalty.PointsAddedAvroEvent other) {
    if (other == null) {
      return new pl.punktozaur.avro.loyalty.PointsAddedAvroEvent.Builder();
    } else {
      return new pl.punktozaur.avro.loyalty.PointsAddedAvroEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for PointsAddedAvroEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PointsAddedAvroEvent>
    implements org.apache.avro.data.RecordBuilder<PointsAddedAvroEvent> {

    private java.util.UUID sagaId;
    private java.util.UUID loyaltyAccountId;
    private int points;
    private java.time.Instant createdAt;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(pl.punktozaur.avro.loyalty.PointsAddedAvroEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.sagaId)) {
        this.sagaId = data().deepCopy(fields()[0].schema(), other.sagaId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.loyaltyAccountId)) {
        this.loyaltyAccountId = data().deepCopy(fields()[1].schema(), other.loyaltyAccountId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.points)) {
        this.points = data().deepCopy(fields()[2].schema(), other.points);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.createdAt)) {
        this.createdAt = data().deepCopy(fields()[3].schema(), other.createdAt);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing PointsAddedAvroEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(pl.punktozaur.avro.loyalty.PointsAddedAvroEvent other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.sagaId)) {
        this.sagaId = data().deepCopy(fields()[0].schema(), other.sagaId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.loyaltyAccountId)) {
        this.loyaltyAccountId = data().deepCopy(fields()[1].schema(), other.loyaltyAccountId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.points)) {
        this.points = data().deepCopy(fields()[2].schema(), other.points);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.createdAt)) {
        this.createdAt = data().deepCopy(fields()[3].schema(), other.createdAt);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'sagaId' field.
      * @return The value.
      */
    public java.util.UUID getSagaId() {
      return sagaId;
    }


    /**
      * Sets the value of the 'sagaId' field.
      * @param value The value of 'sagaId'.
      * @return This builder.
      */
    public pl.punktozaur.avro.loyalty.PointsAddedAvroEvent.Builder setSagaId(java.util.UUID value) {
      validate(fields()[0], value);
      this.sagaId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'sagaId' field has been set.
      * @return True if the 'sagaId' field has been set, false otherwise.
      */
    public boolean hasSagaId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'sagaId' field.
      * @return This builder.
      */
    public pl.punktozaur.avro.loyalty.PointsAddedAvroEvent.Builder clearSagaId() {
      sagaId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'loyaltyAccountId' field.
      * @return The value.
      */
    public java.util.UUID getLoyaltyAccountId() {
      return loyaltyAccountId;
    }


    /**
      * Sets the value of the 'loyaltyAccountId' field.
      * @param value The value of 'loyaltyAccountId'.
      * @return This builder.
      */
    public pl.punktozaur.avro.loyalty.PointsAddedAvroEvent.Builder setLoyaltyAccountId(java.util.UUID value) {
      validate(fields()[1], value);
      this.loyaltyAccountId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'loyaltyAccountId' field has been set.
      * @return True if the 'loyaltyAccountId' field has been set, false otherwise.
      */
    public boolean hasLoyaltyAccountId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'loyaltyAccountId' field.
      * @return This builder.
      */
    public pl.punktozaur.avro.loyalty.PointsAddedAvroEvent.Builder clearLoyaltyAccountId() {
      loyaltyAccountId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'points' field.
      * @return The value.
      */
    public int getPoints() {
      return points;
    }


    /**
      * Sets the value of the 'points' field.
      * @param value The value of 'points'.
      * @return This builder.
      */
    public pl.punktozaur.avro.loyalty.PointsAddedAvroEvent.Builder setPoints(int value) {
      validate(fields()[2], value);
      this.points = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'points' field has been set.
      * @return True if the 'points' field has been set, false otherwise.
      */
    public boolean hasPoints() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'points' field.
      * @return This builder.
      */
    public pl.punktozaur.avro.loyalty.PointsAddedAvroEvent.Builder clearPoints() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'createdAt' field.
      * @return The value.
      */
    public java.time.Instant getCreatedAt() {
      return createdAt;
    }


    /**
      * Sets the value of the 'createdAt' field.
      * @param value The value of 'createdAt'.
      * @return This builder.
      */
    public pl.punktozaur.avro.loyalty.PointsAddedAvroEvent.Builder setCreatedAt(java.time.Instant value) {
      validate(fields()[3], value);
      this.createdAt = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'createdAt' field has been set.
      * @return True if the 'createdAt' field has been set, false otherwise.
      */
    public boolean hasCreatedAt() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'createdAt' field.
      * @return This builder.
      */
    public pl.punktozaur.avro.loyalty.PointsAddedAvroEvent.Builder clearCreatedAt() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PointsAddedAvroEvent build() {
      try {
        PointsAddedAvroEvent record = new PointsAddedAvroEvent();
        record.sagaId = fieldSetFlags()[0] ? this.sagaId : (java.util.UUID) defaultValue(fields()[0]);
        record.loyaltyAccountId = fieldSetFlags()[1] ? this.loyaltyAccountId : (java.util.UUID) defaultValue(fields()[1]);
        record.points = fieldSetFlags()[2] ? this.points : (java.lang.Integer) defaultValue(fields()[2]);
        record.createdAt = fieldSetFlags()[3] ? this.createdAt : (java.time.Instant) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PointsAddedAvroEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<PointsAddedAvroEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PointsAddedAvroEvent>
    READER$ = (org.apache.avro.io.DatumReader<PointsAddedAvroEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










